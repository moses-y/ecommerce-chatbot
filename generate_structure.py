# D:\ecommerce-chatbot\generate_structure.py
import os
import sys
from datetime import datetime, timezone

def generate_project_structure(root_dir, output_file, exclude_dirs=None, exclude_files=None):
    """
    Generates a text representation of the project structure.

    Args:
        root_dir (str): The root directory of the project.
        output_file (str): The file to write the structure to.
        exclude_dirs (set, optional): A set of directory names to exclude. Defaults to None.
        exclude_files (set, optional): A set of file names to exclude. Defaults to None.
    """
    if exclude_dirs is None:
        exclude_dirs = {
            '.git', '.venv', 'venv', '__pycache__', 
            '.pytest_cache', '.idea', 'htmlcov', 'build',
            'dist', 'site'  # Added common build directories
        }
    if exclude_files is None:
        exclude_files = {
            '.DS_Store', '.coverage', '*.pyc', '*.pyo', 
            '*.pyd', '.Python', '*.so'
        }

    if not os.path.isdir(root_dir):
        print(f"Error: Root directory '{root_dir}' not found or is not a directory.")
        sys.exit(1)

    # Get the base name of the root directory
    root_base_name = os.path.basename(root_dir)

    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            # Write header with metadata
            current_time = datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S')
            user = os.getenv('USERNAME') or os.getenv('USER') or 'unknown'
            
            f.write("# Project Structure Generated\n")
            f.write(f"# Generated on: {current_time} UTC\n")
            f.write(f"# Generated by: {user}\n")
            f.write(f"# Root directory: {root_dir}\n\n")
            
            f.write(f"{root_base_name}/\n")

            for dirpath, dirnames, filenames in os.walk(root_dir, topdown=True):
                # Exclude directories
                dirnames[:] = [d for d in dirnames if d not in exclude_dirs]
                
                relative_path = os.path.relpath(dirpath, root_dir)

                # Skip root directory (already printed)
                if relative_path == ".":
                    level = 0
                else:
                    level = relative_path.count(os.sep) + 1

                indent = "    " * level

                # Write directories
                for dirname in sorted(dirnames):
                    f.write(f"{indent}{dirname}/\n")

                # Write files
                for filename in sorted(filenames):
                    if not any(filename.endswith(ext) for ext in exclude_files):
                        f.write(f"{indent}{filename}\n")

    except IOError as e:
        print(f"Error writing to output file '{output_file}': {e}")
        sys.exit(1)
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # Get the current script's directory
    script_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Use the script directory as the project root
    project_root = script_dir
    
    # Output file path
    output_txt = os.path.join(project_root, "project_structure.txt")

    print(f"Generating structure for: {project_root}")
    print(f"Outputting to: {output_txt}")

    # Additional exclude patterns for your specific project
    custom_exclude_dirs = {
        '.git', '.venv', 'venv', '__pycache__', 
        '.pytest_cache', '.idea', '.vscode',
        'htmlcov', 'build', 'dist', 'site'
    }
    
    custom_exclude_files = {
        '.DS_Store', '.coverage', '*.pyc', '*.pyo',
        '*.pyd', '.Python', '*.so', '.env',
        'chatbot_data.db'  # Exclude database file
    }

    generate_project_structure(
        project_root, 
        output_txt,
        exclude_dirs=custom_exclude_dirs,
        exclude_files=custom_exclude_files
    )

    print(f"Project structure has been written to {output_txt}")